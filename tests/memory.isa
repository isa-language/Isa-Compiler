using @import "isa.core.memory"

// Criação de um alocador padrão (dynamic) para heap
const let:box std = memory.box();

@continua(Arena)
@subcontext()  // Subcontexto opcional, desaloca ao fim do escopo
fn exemple(aloc:box&) -> i32& {
    // Alocação dinâmica (ownership explícito)
    let: i32& allocdynamic = std.dynamic<_>(30);
    // Alocação em arena (ownership pertencente à arena)
    let: i32& allocarenas = aloc.allocate<_>(10);
    // Operações e retorno de ownership
    let: i32& result = std.dynamic<_>(allocdynamic + allocarenas);
    return result;  // Ownership transferido ao chamador
}

@continua(Arena)
@subcontext()  // Subcontexto opcional, desaloca ao fim do escopo
fn exemple2(aloc:box&) -> i32& {
    // Alocação dinâmica
    let: i32& allocdynamic = std.dynamic<_>(30);
    // Alocação em arena
    let: i32& allocarenas = aloc.allocate<_>(10);
    // Operação em alocação dinâmica
    allocdynamic += allocarenas;
    return allocdynamic;  // Ownership transferido
}

@lifetime(Arena)  // Ativa o modo arena no escopo
fn main() -> i32 {
    { // Arena principal
        let:Arn arena = memory.arn();  // Inicializa arena
        let: i32& x = arena.allocate<_>();  // Aloca na arena
        x = 42;

        // Exemplo de alocação dinâmica
        let: i64& alloc_dynamic = std.dynamic<_>(100);  
        let: i64& transfer = alloc_dynamic.transection(); // Ownership transferido
        transfer.destroy();  // Liberação explícita

        {
            let: i32& y = arena.allocate<_>();  // Alocação na arena
            y = 50;

            let: i32& z = y;  // Empréstimo válido
            println("{}", z);  // Acesso válido
        }  // Subescopo termina, `y` ainda válido

        @subcontext() {
            let: i32& y = arena.allocate<_>();  // Nova alocação no subcontexto
            y = 99;
            println("{}", y);  // Acesso válido
        }  // Subcontexto termina, memória liberada

        println("{}", x);  // Acesso ainda válido
    }  // Arena desalocada, `x` e alocações associadas tornam-se inválidas

    return 0;
}
