fn multi_threading_example() -> void {
    let shared_data = Arc::new(Mutex::new(vec![]));

    let threads: Vec<_> = (0..4).map(|i| {
        let data = Arc::clone(&shared_data);
        std::thread::spawn(move || {
            let mut vec = data.lock().unwrap();
            vec.push(i);
        })
    }).collect();

    for (thread : threads) {
        thread.join().unwrap();
    }
}
{
    let arena = Arena::new();
    let obj1 = arena.alloc(42);
    let obj2 = arena.alloc("Hello");
}


